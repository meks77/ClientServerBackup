buildscript {
	ext {
		springBootVersion = '2.1.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

sourceCompatibility = 1.8

dependencies {
//	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.springframework.boot:spring-boot-starter-web')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
//	testImplementation('org.springframework.security:spring-security-test')
	compile project (':common')
	compileOnly project (':client')
	testCompile project (':testUtils')
	implementation ('io.jsondb:jsondb-core:1.0.85')
	implementation('com.google.guava:guava:27.0.1-jre')
	implementation('commons-io:commons-io:2.6')
	annotationProcessor 'org.projectlombok:lombok:1.18.4'
	compileOnly 'org.projectlombok:lombok:1.18.4'
}

def webappDir = "$projectDir/src/main/webapp"
sourceSets {
	main {
		resources {
			srcDirs = ["$webappDir/dist", "$projectDir/src/main/resources"]
		}
	}
}

task cleanClientFiles(type: Delete) {
//	without deleting the client dist isn't replaced
	delete fileTree("src").matching {
		include "/main/webapp/src/assets/clients/*"
	}
}

task copyClientFiles(type: Copy) {
	from "$projectDir/../client/build/distributions"
	include "*.zip"
	into "$projectDir/src/main/webapp/src/assets/clients"
	rename '(client).*(.zip)',  '$1$2'
}

processResources {
	dependsOn "cleanClientFiles"
	dependsOn "copyClientFiles"
	dependsOn "buildAngular"
}

task buildAngular(type:Exec) {
	dependsOn "installAngular"
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	// Add task to the standard build group
	group = BasePlugin.BUILD_GROUP
	// ng doesn't exist as a file in windows -> ng.cmd
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "ng.cmd", "build"
	} else {
		commandLine "ng", "build"
	}
}

task installAngular(type:Exec) {
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "npm.cmd", "install"
	} else {
		commandLine "npm", "install"
	}
}
